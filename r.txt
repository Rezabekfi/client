package com.quoridor.GameLogic;

import java.io.Serializable;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;

import org.json.JSONObject;
import org.json.JSONArray;

public class GameMessage implements Serializable {
    
    private MessageType type;
    private JSONObject messageData;

    public enum MessageType {
        WELCOME,
        WAITING,
        GAME_STARTED,
        GAME_ENDED,
        MOVE,
        ERROR,
        WRONG_MESSAGE,
        ACK,
        NEXT_TURN,
        NAME_REQUEST,
        NAME_RESPONSE,
        HEARTBEAT
    }

    public GameMessage(MessageType type, Map<String, Object> data) {
        this.type = type;
        this.messageData = new JSONObject(data);
    }

    public MessageType getType() {
        return type;
    }

    public void setType(MessageType type) {
        this.type = type;
    }

    public static GameMessage fromJSON(String jsonString) {
        JSONObject json = new JSONObject(jsonString);
        MessageType type = MessageType.valueOf(json.getString("type").toUpperCase());
        JSONObject jsonData = json.getJSONObject("data");
        
        // Convert JSONObject to Map<String, Object>
        Map<String, Object> data = jsonData.toMap();
        
        return new GameMessage(type, data);
    }

    // Method to parse board string into char[][]
    public char[][] getBoardArray() {
        String boardStr = getStringData("board");
        if (boardStr == null) return null;
        
        int size = (int)Math.sqrt(boardStr.length());
        char[][] board = new char[size][size];
        
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                board[i][j] = boardStr.charAt(i * size + j);
            }
        }
        return board;
    }

    // Method to get wall positions
    public List<Position> getWallPositions(String wallType) {
        Object wallData = getData(wallType + "_walls");
        if (wallData == null) return new ArrayList<>();
        
        List<List<Integer>> wallsList = (List<List<Integer>>) wallData;
        List<Position> positions = new ArrayList<>();
        
        for (List<Integer> wall : wallsList) {
            positions.add(new Position(wall.get(0), wall.get(1)));
        }
        
        return positions;
    }

    // Method to get player information
    public List<Player> getPlayers() {
        Object playersData = getData("players");
        if (playersData == null) return new ArrayList<>();
        
        List<Map<String, Object>> playersList = (List<Map<String, Object>>) playersData;
        List<Player> players = new ArrayList<>();
        
        for (Map<String, Object> playerData : playersList) {
            String id = (String) playerData.get("id");
            String name = (String) playerData.get("name");
            String color = (String) playerData.get("color");
            int wallsLeft = ((Number) playerData.get("walls_left")).intValue();
            List<Number> pos = (List<Number>) playerData.get("position");
            Position position = new Position(pos.get(0).intValue(), pos.get(1).intValue());
            
            // Create player with appropriate direction based on position
            GoalDirection direction = determineDirection(position);
            Player player = new Player(name, direction, position, getColorChar(color));
            player.setNumberOfWalls(wallsLeft);
            players.add(player);
        }
        
        return players;
    }

    private char getColorChar(String color) {
        switch (color.toLowerCase()) {
            case "red": return 'r';
            case "blue": return 'b';
            case "green": return 'g';
            case "yellow": return 'y';
            default: return 'p';
        }
    }

    private GoalDirection determineDirection(Position position) {
        if (position.getRow() == 0) return GoalDirection.SOUTH;
        if (position.getRow() == 8) return GoalDirection.NORTH;
        if (position.getCol() == 0) return GoalDirection.EAST;
        if (position.getCol() == 8) return GoalDirection.WEST;
        return GoalDirection.NORTH; // default
    }

    // Method to create a move message
    public static GameMessage createMoveMessage(String playerId, boolean isHorizontal, Position... positions) {
        Map<String, Object> data = new HashMap<>();
        data.put("player_id", playerId);
        data.put("is_horizontal", isHorizontal);
        data.put("position", positions);
        
        return new GameMessage(MessageType.MOVE, data);
    }

    // Method to create a name response message
    public static GameMessage createNameResponse(String name) {
        Map<String, Object> data = new HashMap<>();
        data.put("name", name);
        return new GameMessage(MessageType.NAME_RESPONSE, data);
    }

    public String getStringData(String key) {
        return messageData.optString(key);
    }

    public Object getData(String key) {
        return messageData.opt(key);
    }
} 
